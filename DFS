#include <iostream>
#include <vector>
#include <omp.h>

class Graph {
public:
    int V;
    std::vector<std::vector<int>> adj;

    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    void parallelDFSUtil(int node, std::vector<bool>& visited) {
        visited[node] = true;
        std::cout << node << " ";

        #pragma omp parallel for
        for (int i = 0; i < adj[node].size(); i++) {
            int neighbor = adj[node][i];
            if (!visited[neighbor]) {
                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        parallelDFSUtil(neighbor, visited);
                    }
                }
            }
        }
    }

    void parallelDFS(int start) {
        std::vector<bool> visited(V, false);
        std::cout << "Parallel DFS: ";
        parallelDFSUtil(start, visited);
        std::cout << std::endl;
    }
};

int main() {
    Graph g(7);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);

    g.parallelDFS(0);

    return 0;
}
